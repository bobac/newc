#!/bin/bash

function usage() {
  echo "Usage: $0 [-l|--lib <lib path>] [-c|--cc <compiler>] <project_name>"
  exit -1
}

function project_exists() {
  echo "Project $PROJECT already exists."
  exit 1000
}

function make_dirs() {
  if [[ -d $PROJECT ]]; then
    project_exists
  fi

  mkdir $PROJECT
  mkdir $PROJECT/src
  mkdir $PROJECT/obj
  mkdir $PROJECT/bin
  mkdir -p $PROJECT/tests/bin
}

function create_main() {
cat >$PROJECT/src/main.c << EOF

int main(int argc, char **argv) {

}
EOF
}


function create_makefile() {
  TAB="$(printf '\t')"
cat >$PROJECT/Makefile << EOF
CC=$CC
CFLAGS=-Isrc/ -g -Wall
CFLAGS_TEST=-I../src/ -g -Wall

SRC=src
OBJ=obj
SRCS=\$(wildcard \$(SRC)/*.c) \$(wildcard \$(SRC)/*/*.c)
OBJS=\$(patsubst \$(SRC)/%.c, \$(OBJ)/%.o, \$(SRCS))

TEST=tests
TESTSRCS=\$(filter-out src/main.c, \$(SRCS))
TESTS=\$(wildcard \$(TEST)/*.c) \$(wildcard \$(TEST)/*/*.c)
TESTOBJS=\$(patsubst \$(SRC)/%.c, \$(TEST)/bin/%.o, \$(TESTSRCS))
TESTBINS=\$(patsubst \$(TEST)/%.c, \$(TEST)/bin/%, \$(TESTS))

BIN=bin/main

all:\$(BIN)

\$(BIN): \$(OBJS)
${TAB}\$(CC) \$(CFLAGS) \$(OBJS) -o \$@

\$(OBJ)/%.o: \$(SRC)/%.c
${TAB}\$(CC) \$(CFLAGS) -c \$< -o \$@

\$(TEST)/bin/%.o: \$(SRC)/%.c
${TAB}\$(CC) \$(CFLAGS_TEST) -c \$< -o \$@

\$(TEST)/bin/%: \$(TEST)/%.c
${TAB}\$(CC) \$(CFLAGS_TEST) \$(TESTOBJS) \$< -o \$@ -lcriterion

test: \$(TESTOBJS) \$(TESTBINS)
${TAB}echo TESTBINS=\$(TESTBINS)
${TAB}for test in \$(TESTBINS) ; do ./\$\$test ; done

clean:
${TAB}find bin/ -type f -exec rm {} +
${TAB}find obj/ -type f -exec rm {} +
${TAB}find tests/bin/ -type f -exec rm {} +

EOF
}

function create_gitignore() {
cat >$PROJECT/.gitignore << EOF
/bin
/obj
/tests/bin
EOF
}

function create_header_file() {
  FILE=$1
  GUARD=$2
cat >$FILE <<EOF
#ifndef $GUARD
#define $GUARD

#endif
EOF
}

function create_c_file() {
  FILE=$1
  INCL=$2
cat > $FILE <<EOF
#include "$INCL"

EOF
}

function create_project_file() {
  F=$1
  echo "F=$F"
  PATH_PART=${F%/*}
  RELATIVE_PATH_PART="$PATH_PART/"
  if [ $F = $PATH_PART ]; then #resolve issue when presented just with plain file name with no path
    PATH_PART=""
    RELATIVE_PATH_PART=""
  fi
  echo "P=$PATH_PART"
  BASE_PART=${F##*/}
  echo "B=$BASE_PART"
  EXT_PART=${BASE_PART##*.}
  echo "E=$EXT_PART"
  NAME_PART=${BASE_PART%.*}
  echo "N=$NAME_PART"

  if [[ -z $PATH_PART ]]; then
    SRC_PATH_PART=src
    OBJ_PATH_PART=obj
  else
    SRC_PATH_PART=src/$PATH_PART
    OBJ_PATH_PART=obj/$PATH_PART
  fi

  mkdir -p $SRC_PATH_PART $OBJ_PATH_PART

  #if creating a C file, create %.c and %.h combo
  if [ $EXT_PART = "c" ]; then
    echo "creating $SRC_PATH_PART/$NAME_PART.c"
    create_c_file $SRC_PATH_PART/$NAME_PART.c $RELATIVE_PATH_PART$NAME_PART.h

    echo "creating $SRC_PATH_PART/$NAME_PART.h"
    echo "inserting #ifndef guards..."
    N=$(echo $NAME_PART | tr '[:lower:]' '[:upper:]')
    create_header_file $SRC_PATH_PART/$NAME_PART.h "${N}_H"

  else
    echo "creating $SRC_PATH_PART/$NAME_PART.$EXT_PART"
    if [ $EXT_PART = "h" ]; then #if creating a H file, insert relevant #ifndef gaurd
      echo "inserting #ifndef guards..."
      N=$(echo $NAME_PART | tr '[:lower:]' '[:upper:]')
      create_header_file $SRC_PATH_PART/$NAME_PART.h "${N}_H"
    else #or just create plain empty file
      touch $SRC_PATH_PART/$NAME_PART.$EXT_PART
    fi
  fi
}

function create_readme() {
cat >$PROJECT/README.md << EOF
# $PROJECT

## Dependencies

## Installation

## Usage

## Building

## Testing

...
EOF
}

function create_dot_newc() {
cat >$PROJECT/.newc << EOF
DO NOT DELETE THIS FILE!
This file is autogenerated by newc C project manager and it is needed by newc. If you delete it and still try to use the newc,
you may break things!
EOF
}

if [[ $# -eq 0 ]]; then
  usage
fi

CC="gcc"
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -l|--lib)
      LIBPATH="$2"
      shift # past argument
      shift # past value
      ;;
    -c|--cc)
      CC="$2"
      shift # past argument
      shift # past value
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ ! -f ".newc" ]]; then 
  PROJECT=$1
  echo "Creating new C project in $PROJECT/"
  echo "C compiler = ${CC}"
  echo "Library path = ${LIBPATH}"

  make_dirs
  create_main
  create_makefile
  create_gitignore
  create_readme
  create_dot_newc

else
  FILE=$1
  echo "Creating $FILE"
  create_project_file $FILE
fi
exit 0